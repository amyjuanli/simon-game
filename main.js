/* 'global' variables --------------------------------*/
const SIMONSVG = document.querySelector("#simon");
const OFF = document.querySelector("#off-btn");
const ON = document.querySelector("#on-btn");
const START = document.querySelector("#start");
const STRICT = document.querySelector("#strict");
const COUNT = document.querySelector("#count-output");

// four clicking areas in Simon game
const BLUE = document.querySelector("#blue-btn");
const RED = document.querySelector("#red-btn");
const GREEN = document.querySelector("#green-btn");
const YELLOW = document.querySelector("#yellow-btn");

var count = 1;
var clickTimes = 0;
var matchTimes = 0;

var runSimon = false;
var runMode = 'START';

var fourColorsId = ["green-btn", "blue-btn", "red-btn", "yellow-btn"];
var generateIdVal = [];
var soundUrls = {
    "red-btn": "https://s3.amazonaws.com/freecodecamp/simonSound1.mp3",
    "blue-btn": "https://s3.amazonaws.com/freecodecamp/simonSound2.mp3",
    "green-btn": "https://s3.amazonaws.com/freecodecamp/simonSound3.mp3",
    "yellow-btn": "https://s3.amazonaws.com/freecodecamp/simonSound4.mp3"
};
var soundUrl; // store the sound url for both simon generator and userclick

/* additional functions --------------------------------------------------*/
function playSound(url) {
    let au = new Audio(url);
    au.play();
}

// generate random integer to randomly select the color
function getRandomInt(x) {
    return Math.floor(Math.random(x) * x);
}

var initial = 0;

function myLoopFunc() {
    setTimeout(function () {
        console.log("it is loop function");

        // add brightness to chosen color
        document
            .querySelector("#" + generateIdVal[initial])
            .setAttribute("fill-opacity", ".5");

        // add corresponding sound to that color
        soundUrl = soundUrls[generateIdVal[initial]];
        // console.log("sound url: " + soundUrl);
        playSound(soundUrl);
        setTimeout(resetColor, 500);
        initial++;
        if (initial < count) {
            myLoopFunc();
        }
    }, 1000);
}

// generating simon pattern
function generator() {
    let temp = fourColorsId[getRandomInt(4)];
    generateIdVal.push(temp);
    console.log("the generated Id inside the generator() is : " + generateIdVal);

    myLoopFunc();
    console.log('loop func finish');
    console.log('run simon: ' + runSimon);
    initial = 0;
    runSimon = true; // indicate Simon has began
    console.log('run simon: ' + runSimon);
}

// reset functions
// reset color to original without adding brightness
function resetColor() {
    BLUE.setAttribute("fill-opacity", "1");
    YELLOW.setAttribute("fill-opacity", "1");
    RED.setAttribute("fill-opacity", "1");
    GREEN.setAttribute("fill-opacity", "1");
}
// reset global variables:
function resetGlobalVars() {
    count = 1;
    matchTimes = 0; // reset
    clickTimes = 0; // reset
    generateIdVal = [];
}

var noMatchRoundTimes = 0;

// user click the color pattern following the Simon pattern generator
function userClick(e) {
    console.log("user click");

    let id = e.target.id;

    if (ON.getAttribute("fill") === "#486DB4" && runSimon === true) {
        document.querySelector("#" + id).setAttribute("fill-opacity", ".5");
        setTimeout(resetColor, 1000);
        playSound(soundUrls[id]);

        clickTimes++;
        // console.log("current path id generated by Simon: " + generateId);

        if (id !== generateIdVal[matchTimes]) {
            noMatchRoundTimes++; // update the times of not matching
            if ((noMatchRoundTimes > 1 && runMode == 'START') || noMatchRoundTimes == 1) {
                COUNT.innerHTML = "!!";
                matchTimes = 0; // reset
                clickTimes = 0; // reset
                setTimeout(function () {
                    COUNT.innerHTML = leadingZero(count);
                }, 1000);
                // generateIdVal.pop(); // remove the last element and update with a new one
                // generator();
                myLoopFunc();
                initial = 0;
            } else {
                strict(); // if mistakes > 1, then restart the game from beginning
            }
        } else {
            matchTimes++;
        }

        if (clickTimes === count) {
            if (matchTimes === count) {
                // clickTimes
                console.log("now click times: " + clickTimes);
                matchTimes = 0;
                clickTimes = 0;
                count++;
                COUNT.innerHTML = leadingZero(count);
                resetColor(); // remove brightness from all color pathes
                generator();
            }
        }
    }
}

// output two digits number
function leadingZero(x) {
    if (x < 10) {
        return "0" + x;
    } else {
        return x;
    }
}

/* callback functions --------------------------------------------------*/
function strict() {
    runMode = 'STRICT';
    noMatchRoundTimes = 0; // reset to zero: start counting the no match times for 'strict' mode from scratch
    resetGlobalVars(); // reset the following variable (important!)
    COUNT.innerHTML = "--";
    setTimeout(function () {
        COUNT.innerHTML = leadingZero(count);
    }, 1000);
    generator();
}

function start() {
    noMatchRoundTimes = 0; // reset to zero: starting counting the no match round times for 'START' mode from scratch
    // console.log(COUNT.innerHTML);
    if (ON.getAttribute("fill") == "#486DB4") {
        COUNT.innerHTML = leadingZero(count);
        generator();
    }
}

function switchOn() {
    // console.log('switch on');
    OFF.setAttribute("fill", "#0A0B0D");
    ON.setAttribute("fill", "#486DB4");
}

function swithOff() {
    OFF.setAttribute("fill", "#486DB4");
    ON.setAttribute("fill", "#0A0B0D");
}

/* event handlers ---------------------------------------------------*/
OFF.addEventListener("click", switchOn, false);
ON.addEventListener("click", swithOff, false);
START.addEventListener("click", start, false);
STRICT.addEventListener("click", strict, false);